//importing required libraries
import Connection.Conn; 
import Helper.UserRole; // helper class
import java.sql.PreparedStatement; 
import java.sql.ResultSet; 
import java.sql.SQLException; 
import java.sql.Statement; 
import javax.swing.JFrame; 
import javax.swing.JOptionPane; 
import javax.swing.RowFilter; 
import javax.swing.table.DefaultTableModel; 
import javax.swing.table.TableRowSorter; 


/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author rajas
 */
public class Course extends javax.swing.JFrame {

    /**
     * Creates new form Dashboard
     */
    public Course() {        
        initComponents();
        fetchDataAndShowInTable();
        setupRoleBasedButtonVisibility();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        pnMenu = new javax.swing.JPanel();
        pncms = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btndashboard = new javax.swing.JButton();
        btnStudent = new javax.swing.JButton();
        btnTutor = new javax.swing.JButton();
        btnCourse = new javax.swing.JButton();
        btnSetting = new javax.swing.JButton();
        btnLogout = new javax.swing.JButton();
        pnbase = new javax.swing.JPanel();
        lbStudent = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablestudent = new javax.swing.JTable();
        txtSearch = new javax.swing.JTextField();
        lblSearch = new javax.swing.JLabel();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(102, 102, 102));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnMenu.setBackground(new java.awt.Color(0, 153, 153));

        pncms.setBackground(new java.awt.Color(0, 204, 204));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Course Management System");

        javax.swing.GroupLayout pncmsLayout = new javax.swing.GroupLayout(pncms);
        pncms.setLayout(pncmsLayout);
        pncmsLayout.setHorizontalGroup(
            pncmsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pncmsLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pncmsLayout.setVerticalGroup(
            pncmsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pncmsLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        btndashboard.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btndashboard.setText("Dashboard");
        btndashboard.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btndashboardMouseClicked(evt);
            }
        });

        btnStudent.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnStudent.setText("Student");
        btnStudent.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnStudentMouseClicked(evt);
            }
        });

        btnTutor.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnTutor.setText("Tutor");
        btnTutor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnTutorMouseClicked(evt);
            }
        });

        btnCourse.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnCourse.setText("Course");
        btnCourse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCourseMouseClicked(evt);
            }
        });

        btnSetting.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnSetting.setText("Setting");
        btnSetting.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSettingMouseClicked(evt);
            }
        });

        btnLogout.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnLogout.setText("Logout");
        btnLogout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnLogoutMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnMenuLayout = new javax.swing.GroupLayout(pnMenu);
        pnMenu.setLayout(pnMenuLayout);
        pnMenuLayout.setHorizontalGroup(
            pnMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pncms, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnMenuLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(pnMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSetting, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTutor, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btndashboard, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        pnMenuLayout.setVerticalGroup(
            pnMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnMenuLayout.createSequentialGroup()
                .addComponent(pncms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addComponent(btndashboard, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(btnStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(btnTutor, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(btnCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(btnSetting, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53))
        );

        getContentPane().add(pnMenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 270, 600));

        pnbase.setBackground(new java.awt.Color(0, 102, 102));

        lbStudent.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        lbStudent.setForeground(new java.awt.Color(255, 255, 255));
        lbStudent.setText("Course Menu");

        tablestudent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Id", "Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablestudent);

        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        lblSearch.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        lblSearch.setForeground(new java.awt.Color(255, 255, 255));
        lblSearch.setText("Search Courses");

        btnEdit.setText("Edit");
        btnEdit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEditMouseClicked(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnDeleteMouseClicked(evt);
            }
        });

        btnAdd.setText("Add");
        btnAdd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnbaseLayout = new javax.swing.GroupLayout(pnbase);
        pnbase.setLayout(pnbaseLayout);
        pnbaseLayout.setHorizontalGroup(
            pnbaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnbaseLayout.createSequentialGroup()
                .addGroup(pnbaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnbaseLayout.createSequentialGroup()
                        .addGap(171, 171, 171)
                        .addComponent(lbStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnbaseLayout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addGroup(pnbaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(pnbaseLayout.createSequentialGroup()
                                .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(98, 98, 98)
                                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnbaseLayout.createSequentialGroup()
                                .addComponent(lblSearch)
                                .addGap(20, 20, 20)
                                .addComponent(txtSearch))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 622, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(63, Short.MAX_VALUE))
        );
        pnbaseLayout.setVerticalGroup(
            pnbaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnbaseLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(lbStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61)
                .addGroup(pnbaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                    .addComponent(txtSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(pnbaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEdit)
                    .addComponent(btnDelete)
                    .addComponent(btnAdd))
                .addGap(39, 39, 39))
        );

        getContentPane().add(pnbase, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 0, 760, 600));

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void setupRoleBasedButtonVisibility() {
    String role = UserRole.getInstance().getRole();
    boolean isAdmin = "Admin".equals(role);
    
    btnAdd.setVisible(isAdmin);
    btnEdit.setVisible(isAdmin);
    btnDelete.setVisible(isAdmin);
}

    private void btnLogoutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLogoutMouseClicked
        Login lg = new Login();
        lg.setVisible(true);
        lg.pack();
        lg.setLocationRelativeTo(null);
        lg.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_btnLogoutMouseClicked

    private void btnStudentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnStudentMouseClicked
        Student st = new Student();
        st.setVisible(true);
        st.pack();
        st.setLocationRelativeTo(null);
        st.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_btnStudentMouseClicked

    private void btnTutorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnTutorMouseClicked
        Tutor tt = new Tutor();
        tt.setVisible(true);
        tt.pack();
        tt.setLocationRelativeTo(null);
        tt.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_btnTutorMouseClicked

    private void btnCourseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCourseMouseClicked
        Course cs = new Course();
        cs.setVisible(true);
        cs.pack();
        cs.setLocationRelativeTo(null);
        cs.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_btnCourseMouseClicked

    private void btnSettingMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSettingMouseClicked
        Setting st = new Setting();
        st.setVisible(true);
        st.pack();
        st.setLocationRelativeTo(null);
        st.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_btnSettingMouseClicked

    private void btndashboardMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btndashboardMouseClicked
        Dashboard ds = new Dashboard();
        ds.setVisible(true);
        ds.pack();
        ds.setLocationRelativeTo(null);
        ds.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_btndashboardMouseClicked

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        DefaultTableModel tm = (DefaultTableModel) tablestudent.getModel();
        TableRowSorter<DefaultTableModel> obj =new TableRowSorter<> (tm);
        tablestudent.setRowSorter(obj);
        obj.setRowFilter(RowFilter.regexFilter(txtSearch.getText()));
    }//GEN-LAST:event_txtSearchKeyReleased

    private void btnEditMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEditMouseClicked
        int selectedRow = tablestudent.getSelectedRow();
    if (selectedRow >= 0) {
        int currentCourseId = (int) tablestudent.getValueAt(selectedRow, 0); // Store Current course ID
        String currentCourseName = (String) tablestudent.getValueAt(selectedRow, 1); // Store Current course name

        // Prompt for the new course name
        String newCourseName = JOptionPane.showInputDialog(this, "Enter new course name:", currentCourseName);
        if (newCourseName != null && !newCourseName.trim().isEmpty()) {
            try {
                Conn c = new Conn();
                // Update the course name
                String query = "UPDATE course SET name = ? WHERE Id = ?";
                PreparedStatement ps = c.getConnection().prepareStatement(query);
                ps.setString(1, newCourseName);
                ps.setInt(2, currentCourseId);
                int updated = ps.executeUpdate();
                if (updated > 0) {
                    fetchDataAndShowInTable(); // Refresh table
                    JOptionPane.showMessageDialog(null, "Course updated successfully");
                } else {
                    JOptionPane.showMessageDialog(null, "No course was updated. Check the provided ID.");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Failed to update course");
                e.printStackTrace();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Course name cannot be empty.");
        }
    } else {
        JOptionPane.showMessageDialog(null, "Please select a course to edit");
    }
    }//GEN-LAST:event_btnEditMouseClicked

    private void btnDeleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDeleteMouseClicked
     int selectedRow = tablestudent.getSelectedRow();
        if (selectedRow >= 0) {
            int courseId = (int) tablestudent.getValueAt(selectedRow, 0); 
            int confirmDelete = JOptionPane.showConfirmDialog(this, "Deleting this course will also delete all associated records. Are you sure?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
            if (confirmDelete == JOptionPane.YES_OPTION) {
                deleteCourseWithDependencies(courseId);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a course to delete");
        }

    }//GEN-LAST:event_btnDeleteMouseClicked

    private void deleteCourseWithDependencies(int courseId) {
    Conn c = new Conn();
    try {
        var conn = c.getConnection(); 
        conn.setAutoCommit(false); 

        // Delete enrollments associated with the course
        String deleteEnrollmentsQuery = "DELETE FROM enrollments WHERE course_id = ?";
        try (PreparedStatement psEnrollments = conn.prepareStatement(deleteEnrollmentsQuery)) {
            psEnrollments.setInt(1, courseId);
            psEnrollments.executeUpdate();
        }

        // Find all modules associated with the course
        String findModulesQuery = "SELECT id FROM modules WHERE courseId = ?";
        try (PreparedStatement psFindModules = conn.prepareStatement(findModulesQuery)) {
            psFindModules.setInt(1, courseId);
            ResultSet rsModules = psFindModules.executeQuery();
            while (rsModules.next()) {
                int moduleId = rsModules.getInt("id");

                // Delete marks associated with each module
                String deleteMarksQuery = "DELETE FROM marks WHERE module_id = ?";
                try (PreparedStatement psDeleteMarks = conn.prepareStatement(deleteMarksQuery)) {
                    psDeleteMarks.setInt(1, moduleId);
                    psDeleteMarks.executeUpdate();
                }

                // Delete module teachers associated with each module
                String deleteModuleTeachersQuery = "DELETE FROM moduleteachers WHERE moduleId = ?";
                try (PreparedStatement psDeleteModuleTeachers = conn.prepareStatement(deleteModuleTeachersQuery)) {
                    psDeleteModuleTeachers.setInt(1, moduleId);
                    psDeleteModuleTeachers.executeUpdate();
                }
            }
        }

        // Delete modules associated with the course
        String deleteModulesQuery = "DELETE FROM modules WHERE courseId = ?";
        try (PreparedStatement psDeleteModules = conn.prepareStatement(deleteModulesQuery)) {
            psDeleteModules.setInt(1, courseId);
            psDeleteModules.executeUpdate();
        }

        // Finally, delete the course
        String deleteCourseQuery = "DELETE FROM course WHERE Id = ?";
        try (PreparedStatement psCourse = conn.prepareStatement(deleteCourseQuery)) {
            psCourse.setInt(1, courseId);
            psCourse.executeUpdate();
        }

        conn.commit(); // Commit transaction
        fetchDataAndShowInTable(); // Refresh the table to reflect changes
        JOptionPane.showMessageDialog(null, "Course and all associated records deleted successfully");
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Failed to delete course and/or associated records");
        e.printStackTrace();
        try {
            if (c != null && c.getConnection() != null) {
                c.getConnection().rollback(); // Rollback transaction in case of error
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    } finally {
        try {
            if (c != null && c.getConnection() != null) {
                c.getConnection().setAutoCommit(true); // Reset auto-commit to true
                c.getConnection().close(); // Close the connection
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
}

    

    private void btnAddMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddMouseClicked
         // Prompt for Course Name
    String courseName = JOptionPane.showInputDialog(this, "Enter Course Name:");
    if (courseName == null || courseName.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Course name cannot be empty.");
        return;
    }

    // Insert the course into the database
    int courseId = insertCourse(courseName); 

    // Ask if the user wants to add modules to the course
    int addModules = JOptionPane.showConfirmDialog(this, "Do you want to add modules to " + courseName + "?", "Add Modules", JOptionPane.YES_NO_OPTION);
    if (addModules == JOptionPane.YES_OPTION) {
        boolean moreModules = true;
        while (moreModules) {
            // Prompt for Module Name
            String moduleName = JOptionPane.showInputDialog(this, "Enter Module Name for " + courseName + ":");
            if (moduleName != null && !moduleName.trim().isEmpty()) {
                // Insert the module into the database and associate it with the course
                int moduleId = insertModule(moduleName, courseId); 

                // Add teachers to this module
                addTeachersToModule(moduleId, moduleName);

                moreModules = JOptionPane.showConfirmDialog(this, "Add another module for " + courseName + "?", "Add Module", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION;
            } else {
                JOptionPane.showMessageDialog(this, "Module name cannot be empty.");
                // Ask again if  the user want to continue adding modules or finish
                moreModules = JOptionPane.showConfirmDialog(this, "Try adding module again for " + courseName + "?", "Add Module", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION;
                if (!moreModules) {
                    break; // Exit the loop if  user don't want to retry
                }
            }
        }
    }

    JOptionPane.showMessageDialog(this, "Course added successfully.");
    fetchDataAndShowInTable();
    }//GEN-LAST:event_btnAddMouseClicked

    private void addTeachersToModule(int moduleId, String moduleName) {
    boolean moreTeachers = true;
    while (moreTeachers) {
        String teacherName = JOptionPane.showInputDialog(this, "Enter Teacher Name for Module " + moduleName + ":");
        if (teacherName != null && !teacherName.trim().isEmpty()) {
            // Insert the teacher into the database or get the existing teacher ID
            int teacherId = ensureTeacherInsertedAndGetId(teacherName); 

            // Link the module with the teacher in the ModuleTeachers table
            linkModuleAndTeacher(moduleId, teacherId); 

            moreTeachers = JOptionPane.showConfirmDialog(this, "Add another teacher for " + moduleName + "?", "Add Teacher", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION;
        } else {
            JOptionPane.showMessageDialog(this, "Teacher name cannot be empty.");
            // Ask again if user want to continue adding teachers or finish
            moreTeachers = JOptionPane.showConfirmDialog(this, "Try adding teacher again for " + moduleName + "?", "Add Teacher", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION;
            if (!moreTeachers) {
                break; // Exit the loop if user don't want to retry
            }
        }
    }
}
    
        


    
    private int insertCourse(String courseName) {
    int courseId = -1;
    String query = "INSERT INTO course (name) VALUES (?)";
    try {
        Conn conn = new Conn(); // Assuming Conn is your custom connection class
        // Ensure you're using java.sql.Connection here
        try (PreparedStatement ps = conn.getConnection().prepareStatement(query, Statement.RETURN_GENERATED_KEYS)) {
            ps.setString(1, courseName);
            int affectedRows = ps.executeUpdate();
            if (affectedRows > 0) {
                try (ResultSet generatedKeys = ps.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        courseId = generatedKeys.getInt(1);
                    }
                }
            }
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
    }
    return courseId;
}




    private int insertModule(String moduleName, int courseId) {
    int moduleId = -1;
    String query = "INSERT INTO Modules (name, courseId) VALUES (?, ?)";
    try {
        Conn conn = new Conn();
        PreparedStatement ps = conn.getConnection().prepareStatement(query, Statement.RETURN_GENERATED_KEYS);
        ps.setString(1, moduleName);
        ps.setInt(2, courseId);
        int affectedRows = ps.executeUpdate();
        if (affectedRows > 0) {
            try (ResultSet generatedKeys = ps.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    moduleId = generatedKeys.getInt(1);
                }
            }
        }
        ps.close();
    } catch (SQLException ex) {
        ex.printStackTrace();
    }
    return moduleId;
}

    private int ensureTeacherInsertedAndGetId(String teacherName) {
    int teacherId = -1;
    String selectQuery = "SELECT id FROM tutor WHERE firstname = ?";
    String insertQuery = "INSERT INTO tutor (firstname) VALUES (?)";
    try {
        Conn conn = new Conn();
        PreparedStatement selectPs = conn.getConnection().prepareStatement(selectQuery);
        selectPs.setString(1, teacherName);
        ResultSet rs = selectPs.executeQuery();
        if (rs.next()) {
            teacherId = rs.getInt("id");
        } else {
            // Teacher not found, insert new teacher
            PreparedStatement insertPs = conn.getConnection().prepareStatement(insertQuery, Statement.RETURN_GENERATED_KEYS);
            insertPs.setString(1, teacherName);
            int affectedRows = insertPs.executeUpdate();
            if (affectedRows > 0) {
                try (ResultSet generatedKeys = insertPs.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        teacherId = generatedKeys.getInt(1);
                    }
                }
            }
            insertPs.close();
        }
        selectPs.close();
    } catch (SQLException ex) {
        ex.printStackTrace();
    }
    return teacherId;
}

private void linkModuleAndTeacher(int moduleId, int teacherId) {
    String query = "INSERT INTO ModuleTeachers (moduleId, teacherId) VALUES (?, ?)";
    try {
        Conn conn = new Conn();
        PreparedStatement ps = conn.getConnection().prepareStatement(query);
        ps.setInt(1, moduleId);
        ps.setInt(2, teacherId);
        ps.executeUpdate();
        ps.close();
    } catch (SQLException ex) {
        ex.printStackTrace();
    }
}

    
    private void fetchDataAndShowInTable() {
    String query = "SELECT id, name FROM course"; // Adjust table name and columns as necessary
    try {
        Conn c = new Conn();
        java.sql.Connection conn = c.getConnection();
        java.sql.Statement stmt = conn.createStatement();
        var rs = stmt.executeQuery(query);

        DefaultTableModel model = (DefaultTableModel) tablestudent.getModel();
        model.setRowCount(0); // Clear existing data

        while (rs.next()) {
            int id = rs.getInt("id");
            String Cname = rs.getString("name"); // Use column name as in the database
            Object[] row = { id, Cname}; // Assuming you want to combine first name and last name
            model.addRow(row); // Add row to the model
        }
        tablestudent.setModel(model); // This line may be redundant if jTable1 already uses this model
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error in fetching data from database");
        e.printStackTrace();
    }
}

       
    /**
     * @param args the command line arguments
     */
    public static void main (String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Course().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCourse;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnSetting;
    private javax.swing.JButton btnStudent;
    private javax.swing.JButton btnTutor;
    private javax.swing.JButton btndashboard;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbStudent;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JPanel pnMenu;
    private javax.swing.JPanel pnbase;
    private javax.swing.JPanel pncms;
    private javax.swing.JTable tablestudent;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
