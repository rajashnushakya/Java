import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import Connection.Conn;
import Helper.UserSession;
import javax.swing.JFrame;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author rajas
 */
public class Marks extends javax.swing.JFrame {

    /**
     * Creates new form Marks
     */
    public Marks() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtId = new javax.swing.JTextField();
        txtPer = new javax.swing.JTextField();
        txtMname = new javax.swing.JTextField();
        txtGrade = new javax.swing.JTextField();
        btnUpload = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 102, 102));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Module Result Form");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 2, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Enter Percentage");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 2, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Enter Student Id ");

        jLabel4.setFont(new java.awt.Font("Times New Roman", 2, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Enter Module Name ");

        jLabel5.setFont(new java.awt.Font("Times New Roman", 2, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Enter Student Name ");

        jLabel6.setFont(new java.awt.Font("Times New Roman", 2, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Enter Grade");

        btnUpload.setText("Upload");
        btnUpload.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnUploadMouseClicked(evt);
            }
        });

        btnBack.setText("Back");
        btnBack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnBackMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator1))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtMname, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(73, 73, 73))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(198, 198, 198)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(25, 25, 25)
                                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel2)
                                        .addComponent(txtPer, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(226, 226, 226)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtGrade, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel6)))))))
                .addContainerGap(84, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(59, 59, 59)
                    .addComponent(jLabel3)
                    .addContainerGap(524, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(99, 99, 99)
                .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(txtPer, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(txtMname, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtGrade, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(132, 132, 132)
                    .addComponent(jLabel3)
                    .addContainerGap(361, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
     
    private void btnUploadMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnUploadMouseClicked
        
        String moduleName = txtMname.getText().trim(); // Retrieve the module name
        int teacherId = UserSession.getInstance().getTeacherId();

    try {
        String studentName = txtName.getText().trim();
        int studentId = getStudentIdFromName(studentName);
        int moduleId = getModuleIdFromModuleName(moduleName);
        int courseId = getCourseIdByModuleId(moduleId);
        int percentage = Integer.parseInt(txtPer.getText().trim());
        String grade = txtGrade.getText().trim();

        // Enroll the student in the course if not already enrolled
        if (!isStudentEnrolledInModule(studentId, moduleId)) {
            enrollStudentInCourse(studentId);
        }

        // Check if the teacher is assigned to the module
        if (isTeacherAssignedToModule(teacherId, moduleId)) {
            uploadMarks(studentId, moduleId, moduleName, percentage, grade, studentName); 
            //JOptionPane.showMessageDialog(null, "Marks uploaded successfully.");
        } else {
            JOptionPane.showMessageDialog(null, "Failed to upload marks. Ensure teacher assignment.");
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
    }
    }//GEN-LAST:event_btnUploadMouseClicked

    private void btnBackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBackMouseClicked
        Student st = new Student();
        st.setVisible(true);
        st.pack();
        st.setLocationRelativeTo(null);
        st.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_btnBackMouseClicked

    // get a student's ID from their name.
private int getStudentIdFromName(String studentName) throws SQLException {
    String query = "SELECT id FROM student WHERE firstname = ?";
    try (Connection conn = new Conn().getConnection();
         PreparedStatement ps = conn.prepareStatement(query)) {
        ps.setString(1, studentName);
        try (ResultSet rs = ps.executeQuery()) {
            if (rs.next()) {
                return rs.getInt("id");
            }
        }
    }
    return -1; 
}
public void enrollStudentInCourse(int studentId) throws SQLException {
    // Fetch the courseId based on the student's course name
    Integer courseId = getCourseIdForStudent(studentId);
    if (courseId == null) {
        System.out.println("Enrollment failed: Could not find a matching course for the student.");
        return; // Exit if no matching course was found
    }
    
    System.out.println("Attempting to enroll studentId: " + studentId + " into courseId: " + courseId);
    try (Connection conn = new Conn().getConnection();
         PreparedStatement ps = conn.prepareStatement("INSERT INTO enrollments (student_id, course_id) VALUES (?, ?)")) {
        ps.setInt(1, studentId);
        ps.setInt(2, courseId);
        int rowsAffected = ps.executeUpdate();
        if (rowsAffected > 0) {
            System.out.println("Successfully enrolled student " + studentId + " in course " + courseId);
        } else {
            System.out.println("Failed to enroll student " + studentId + " in course " + courseId + ". No rows affected.");
        }
    } catch (SQLException e) {
        System.err.println("SQL exception during enrollment of student " + studentId + " in course " + courseId + ": " + e.getMessage());
        e.printStackTrace();
    }
}





// Utility method to get a module's ID from its name.
private int getModuleIdFromModuleName(String moduleName) throws SQLException {
    String query = "SELECT id FROM modules WHERE name = ?";
    try (Connection conn = new Conn().getConnection();
         PreparedStatement ps = conn.prepareStatement(query)) {
        ps.setString(1, moduleName);
        try (ResultSet rs = ps.executeQuery()) {
            if (rs.next()) {
                return rs.getInt("id");
            }
        }
    }
    return -1; // Module not found
}

// Checks if a teacher is assigned to a module.
private boolean isTeacherAssignedToModule(int teacherId, int moduleId) throws SQLException {
    String query = "SELECT COUNT(*) AS count FROM ModuleTeachers WHERE teacherId = ? AND moduleId = ?";
    try (Connection conn = new Conn().getConnection();
         PreparedStatement ps = conn.prepareStatement(query)) {
        ps.setInt(1, teacherId);
        ps.setInt(2, moduleId);
        try (ResultSet rs = ps.executeQuery()) {
            if (rs.next() && rs.getInt("count") > 0) {
                return true; // Teacher is assigned
            }
        }
    }
    return false; // Teacher not assigned
}

// Checks if a student is enrolled in a module's course.
private boolean isStudentEnrolledInModule(int studentId, int moduleId) throws SQLException {
    String query = "SELECT COUNT(*) AS count FROM Enrollments e " +
                   "JOIN Modules m ON e.course_id = m.courseId " +
                   "WHERE e.student_id = ? AND m.id = ?";
    try (Connection conn = new Conn().getConnection();
         PreparedStatement ps = conn.prepareStatement(query)) {
        ps.setInt(1, studentId);
        ps.setInt(2, moduleId);
        try (ResultSet rs = ps.executeQuery()) {
            if (rs.next() && rs.getInt("count") > 0) {
                return true; 
            }
        }
    }
    return false;
}

private int getCourseIdByModuleId(int moduleId) throws SQLException {
    String query = "SELECT courseId FROM Modules WHERE id = ?";
    try (Connection conn = new Conn().getConnection();
         PreparedStatement ps = conn.prepareStatement(query)) {
        ps.setInt(1, moduleId);
        try (ResultSet rs = ps.executeQuery()) {
            if (rs.next()) {
                return rs.getInt("courseId");
            }
        }
    }
    return -1; // Module or course not found
}


// Modify the uploadMarks method to include a check for matching course IDs
private void uploadMarks(int studentId, int moduleId, String moduleName, int percentage, String grade, String studentName) throws SQLException {
    // First, verify that the student is enrolled in a course that matches the module's course
    if (!isEnrolledInMatchingCourse(studentId, moduleId)) {
        JOptionPane.showMessageDialog(null, "Cannot upload marks. The student is not enrolled in a course matching the module.", "Error", JOptionPane.ERROR_MESSAGE);
        return; // Stop execution if there is no match
    }
    
    // Proceed with mark upload if the check passes
    String query = "INSERT INTO Marks (student_id, module_id, module_name, percentage, grade, student_name) VALUES (?, ?, ?, ?, ?, ?)";
    try (Connection conn = new Conn().getConnection();
         PreparedStatement ps = conn.prepareStatement(query)) {
        ps.setInt(1, studentId);
        ps.setInt(2, moduleId);
        ps.setString(3, moduleName);
        ps.setInt(4, percentage);
        ps.setString(5, grade);
        ps.setString(6, studentName);
        int result = ps.executeUpdate();
        if (result > 0) {
            JOptionPane.showMessageDialog(null, "Marks uploaded successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "Failed to upload marks.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
}

// Method to check if the student is enrolled in a course that matches the module's course
private boolean isEnrolledInMatchingCourse(int studentId, int moduleId) throws SQLException {
    int moduleCourseId = getCourseIdByModuleId(moduleId);
    int studentCourseId = getCourseIdForStudent(studentId);
    
    return moduleCourseId == studentCourseId; // Return true if the IDs match, false otherwise
}
private int getCourseIdForStudent(int studentId) throws SQLException {
    String courseName = getCourseNameForStudent(studentId); // Method to fetch course name for the student
    if (courseName == null) {
        return -1; // If no course name is found, return -1
    }

    String query = "SELECT C.id FROM course C WHERE C.name = ?"; // Corrected query
    try (Connection conn = new Conn().getConnection();
         PreparedStatement ps = conn.prepareStatement(query)) {
        ps.setString(1, courseName); // Corrected parameter setting
        try (ResultSet rs = ps.executeQuery()) {
            if (rs.next()) {
                return rs.getInt("id");
            }
        }
    }
    return -1; // Return -1 if no matching course is found
}


private String getCourseNameForStudent(int studentId) throws SQLException {
    // Query to get the course name from the Students table or a related table
    String query = "SELECT course FROM student WHERE id = ?"; // Adjust based on your schema
    try (Connection conn = new Conn().getConnection();
         PreparedStatement ps = conn.prepareStatement(query)) {
        ps.setInt(1, studentId);
        try (ResultSet rs = ps.executeQuery()) {
            if (rs.next()) {
                return rs.getString("course");
            }
        }
    }
    return null; // Return null if no course name is found
}



// Implement getCourseIdByModuleId as previously outlined



    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Marks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Marks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Marks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Marks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Marks().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnUpload;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField txtGrade;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtMname;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPer;
    // End of variables declaration//GEN-END:variables
}
